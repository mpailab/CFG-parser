def _syntax_rule_matchcase_0(pattern, action):
    return (pattern, quasiquote("expr", ["true"], []), action)

def _syntax_rule_matchcase_1(pattern, cond, action):
    return (pattern,cond,action)

def _syntax_rule_matchcases_0(x):
    x = syn_expand(x)
    return [x]

def _syntax_rule_matchcases_1(xs, x):
    xs = syn_expand(xs)
    x = syn_expand(x)
    xs.append(x)
    return xs

def match2cmp(x,pat):
    if tmatch(pat, quasiquote("expr", ["_"], [])):
        return quasiquote("expr", ["true"], [])
    return quasiquote("expr", ["","==",""], [x, pat])

def _macro_match(x, mc):
    mc = syn_expand(mc)
    conds = [(match2cmp(x,p),cond,s) for (p,cond,s) in mc]
    head = quasiquote("if_stmt_no_else", ["if", " and ", ": ", ""], [conds[0][0], conds[0][1], conds[0][2]])
    for (c, cond, s) in conds[1:]:
        head = quasiquote("expr", ["", " $$INDENTED elif ", " and ", ": ", ""], [head, c, cond, s])
    return head


if __name__ == '__main__':
    for x in range(10):
        if x == 1 and True: print(f'{x} -> a')
        elif x == 2 and True: print(f'{x} -> b')
        elif True and (x<5 or x>8): print(f'{x} -> c')
        elif True and True: print(f'{x} -> d')

def _import_grammar():
    if '_imported_syntax_modules' in globals():
        for sm in _imported_syntax_modules:
            if hasattr(sm, '_import_grammar'):
                sm._import_grammar()

    t  = terminal
    nt = nonterminal
    add_grammar_rules(current_grammar(), [
    syntax_rule('matchcase', [t('INDENTED'), nt('expr'), t(':'), nt('suite')], apply=_syntax_rule_matchcase_0),
    syntax_rule('matchcase', [t('INDENTED'), nt('expr'), t('if'), nt('test'), t(':'), nt('suite')], apply=_syntax_rule_matchcase_1),
    syntax_rule('matchcases', [nt('matchcase')], apply=_syntax_rule_matchcases_0),
    syntax_rule('matchcases', [nt('matchcases'), nt('matchcase')], apply=_syntax_rule_matchcases_1),
    macro_rule('stmt', [t('match'), nt('expr'), t(':'), t('INDENT'), nt('matchcases'), t('DEDENT')], apply=_macro_stmt_match)
    ])
