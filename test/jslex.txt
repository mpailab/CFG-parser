%token: HashBangLine = `'#!' [^\r\n]*`
%pexpr: comment     /= `'/*' (!'*/')[^]* '*/'`
%pexpr: comment     /= `'//' [^\r\n]*`

%pexpr: regexStart     = `[^*\r\n\\/[] / regexBsSeq / '[' regexClassChar* ']'`
%pexpr: regexChar      = `[^\r\n\\/[] / regexBsSeq / '[' regexClassChar* ']'`
%pexpr: regexClassChar = `[^\r\n\]\\] / regexBsSeq`
%pexpr: regexBsSeq     = `'\\' [^\r\n]`
	
%token: RegularExpressionLiteral = `'/' regexStart regexChar* '/' IdentifierPart*`

%token: Identifier = `IdentifierStart IdentifierPart*`

%pexpr: IdentifierPart = `[0-9] / IdentifierStart`
%pexpr: IdentifierStart = `[$_a-zA-Z] / '\\' UnicodeEscapeSequence`

%pexpr: HexDigit = `[_0-9A-Fa-f]`
%pexpr: UnicodeEscapeSequence = `'u' HexDigit HexDigit HexDigit HexDigit / 'u' '{' HexDigit HexDigit+ '}'`

%pexpr: pos_int = `'0' / [1-9][0-9]*`

%token: DecimalLiteral = `('.' [0-9]+ / pos_int ('.' [0-9]*)?) ([Ee] [+-]? [0-9]+)?`

%token: HexIntegerLiteral    = `'0' [xX] [0-9a-fA-F] HexDigit*`
%token: OctalIntegerLiteral  = `'0' [0-7]+`
%token: OctalIntegerLiteral2 = `'0' [oO] [0-7] [_0-7]*`
%token: BinaryIntegerLiteral = `'0' [bB] [01] [_01]*`

%token: BigDecimalIntegerLiteral = `pos_int 'n'`
%token: BigHexIntegerLiteral     = '0' [xX] [0-9a-fA-F] HexDigit* 'n';
%token: BigOctalIntegerLiteral   = '0' [oO] [0-7] [_0-7]* 'n';
%token: BigBinaryIntegerLiteral  = '0' [bB] [01] [_01]* 'n';

%token: TemplateStringLiteral = `'`' ('\\`' | [^`])* '`'`;

%pexpr: comment /= `'<!--' (!'-->' [^])* '-->'`
%pexpr: comment /= `'<![CDATA[' (!']]>' [^])* ']]>'`
