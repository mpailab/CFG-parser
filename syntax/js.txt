%token: HashBangLine = `'#!' [^\r\n]*` ;
%pexpr: comment     /= `'/*' (!'*/' [^])* '*/'` ;
%pexpr: comment     /= `'//' [^\r\n]*` ;

%pexpr: regexStart     = `[^*\r\n\\/[] / regexBsSeq / '[' regexClassChar* ']'` ;
%pexpr: regexChar      = `[^\r\n\\/[] / regexBsSeq / '[' regexClassChar* ']'` ;
%pexpr: regexClassChar = `[^\r\n\]\\] / regexBsSeq` ;
%pexpr: regexBsSeq     = `'\\' [^\r\n]` ;
	
%token: RegularExpressionLiteral = `'/' regexStart regexChar* '/' IdentifierPart*` ;

%pexpr: IdentifierPart = `[0-9] / IdentifierStart` ;
%pexpr: IdentifierStart = `[$_a-zA-Z] / '\\' UnicodeEscapeSequence` ;

%pexpr: HexDigit = `[_0-9A-Fa-f]` ;
%pexpr: UnicodeEscapeSequence = `'u' HexDigit HexDigit HexDigit HexDigit / 'u' '{' HexDigit HexDigit+ '}'` ;

%pexpr: pos_int = `'0'![0-9] / [1-9][0-9]*` ;

%token: DecLit = `('.' [0-9]+ / (pos_int / '0' [0-9]+&[.Ee]) ('.' [0-9]*)?) ([Ee] [+\-]? [0-9]+)?`;

%token: HexLit    = `'0' [xX] [0-9a-fA-F] HexDigit*`;
%token: OctLit  = `'0' [0-7]+![0-9]`;
%token: OctLit2 = `'0' [oO] [0-7] [_0-7]*`;
%token: BinLit = `'0' [bB] [01] [_01]*`;

%token: BigDecLit = `pos_int 'n'`;
%token: BigHexLit     = `'0' [xX] [0-9a-fA-F] HexDigit* 'n'`;
%token: BigOctLit   = `'0' [oO] [0-7] [_0-7]* 'n'`;
%token: BigBinLit  = `'0' [bB] [01] [_01]* 'n'`;

%pexpr: comment /= `'<!--' (!'-->' [^])* '-->'`;
%pexpr: comment /= `'<![CDATA[' (!']]>' [^])* ']]>'`;

%token: ident \= `IdentifierStart IdentifierPart*` ;

////////////////////////////////////////////////////////////
%pexpr: TemplStrChar = `'\\'[^] / !('`'/'${')[^]`;
%token: TemplMid = `'}' TemplStrChar* '${'`;
%token: TemplEnd = `'}' TemplStrChar* '`'`;
%token: TemplStart = `'`' TemplStrChar* '${'`;
%token: TemplStrFull = `'`' TemplStrChar* '`'`;

////////////////////////////////////////////////////////////
%syntax: templStr -> TemplStrFull;
%syntax: templStr -> templStrBeg iExpr TemplEnd;
%syntax: templStrBeg -> TemplStart;
%syntax: templStrBeg -> templStrBeg iExpr TemplMid;
////////////////////////////////////////////////////////////

%syntax: text -> stmts;
%syntax: text -> HashBangLine stmts;

%syntax: stmt -> eosSt ;
%syntax: stmt -> fullSt;

%syntax: eosSt -> varSt;
%syntax: eosSt -> impSt;
%syntax: eosSt -> exprSt;


%syntax: fullSt -> block;
%syntax: fullSt -> eosSt ';';
%syntax: fullSt -> ';' ;
%syntax: fullSt -> clsDecl;
%syntax: fullSt -> trySt;
%syntax: fullSt -> funDecl;

%syntax: block -> '{' '}';
%syntax: block -> '{' stmts '}';

%syntax: stmts -> eosSt;
%syntax: stmts -> fullSt;
%syntax: stmts -> fullSt stmts;

%syntax: impSt -> 'import' string;
%syntax: impSt -> 'import' aliasName importFrom ;
%syntax: impSt -> 'import' importDefault importNamespace importFrom;
%syntax: impSt -> 'import' importDefault moduleItems importFrom;
%syntax: impSt -> 'import' importNamespace importFrom;
%syntax: impSt -> 'import' moduleItems importFrom;

%syntax: aliasNameList -> aliasName;
%syntax: aliasNameList -> aliasName ',' ;
%syntax: aliasNameList -> aliasName ',' aliasNameList;
%syntax: moduleItems -> '{' '}';
%syntax: moduleItems -> '{' aliasNameList '}';

%syntax: importDefault -> aliasName ',';

%syntax: importNamespace -> '*' ;
%syntax: importNamespace -> '*' 'as' idName;

%syntax: importFrom -> 'from' string;

%syntax: aliasName -> ident;
%syntax: aliasName -> ident 'as' idName;

%syntax: eosSt -> 'export' exportFromBlock;
%syntax: eosSt -> 'export' varSt;
%syntax: fullSt -> 'export' clsDecl;
%syntax: fullSt -> 'export' funDecl;
%syntax: eosSt -> 'export' 'default' ieExpr;
%syntax: fullSt -> 'export' 'default' fExpr;

%syntax: exportFromBlock -> importNamespace importFrom;
%syntax: exportFromBlock -> moduleItems importFrom;
%syntax: exportFromBlock -> moduleItems ;

%syntax: varSt -> varModifier varDecls;

%syntax: varDecls -> varDecl ;
%syntax: varDecls -> varDecls ',' varDecl;

%syntax: varDecl -> assignable;
%syntax: varDecl -> assignable '=' iExpr;


%syntax: eosSt -> esExpr;
%syntax: eosSt -> sExpr ',' eexprSeq;

%syntax: fullSt -> fsExpr;
%syntax: fullSt -> sExpr ',' fexprSeq;

%syntax: fullSt -> 'if' '(' exprSeq ')' fullSt;
%syntax: fullSt -> 'if' '(' exprSeq ')' stmt 'else' fullSt;

%syntax: fullSt -> 'while' '(' exprSeq ')' fullSt;
%syntax: optExprSeq -> ';' ;
%syntax: optExprSeq -> ';' exprSeq;
%syntax: fullSt -> 'for' '(' optExprSeq optExprSeq ')' fullSt;
%syntax: fullSt -> 'for' '(' exprSeq optExprSeq optExprSeq ')' fullSt;
%syntax: fullSt -> 'for' '(' varSt optExprSeq optExprSeq ')' fullSt;
%syntax: fullSt -> 'for' '(' iExpr 'in' exprSeq ')' fullSt;
%syntax: fullSt -> 'for' '(' varSt 'in' exprSeq ')' fullSt;
%syntax: fullSt -> 'for' '(' iExpr 'of' exprSeq ')' fullSt;
%syntax: fullSt -> 'for' '(' varSt 'of' exprSeq ')' fullSt;
%syntax: fullSt -> 'for' 'await' '(' iExpr 'of' exprSeq ')' fullSt;
%syntax: fullSt -> 'for' 'await' '(' varSt 'of' exprSeq ')' fullSt;

%syntax: fullSt -> 'with' '(' exprSeq ')' fullSt;

%syntax: fullSt -> ident ':' fullSt;


%syntax: eosSt -> 'if' '(' exprSeq ')' eosSt;
%syntax: eosSt -> 'if' '(' exprSeq ')' stmt 'else' eosSt;

%syntax: fullSt -> 'do' stmt 'while' '(' exprSeq ')';
%syntax: fullSt -> 'do' stmt 'while' '(' exprSeq ')' ';';
%syntax: eosSt -> 'while' '(' exprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' optExprSeq optExprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' exprSeq optExprSeq optExprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' varSt optExprSeq optExprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' iExpr 'in' exprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' varSt 'in' exprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' iExpr 'of' exprSeq ')' eosSt;
%syntax: eosSt -> 'for' '(' varSt 'of' exprSeq ')' eosSt;
%syntax: eosSt -> 'for' 'await' '(' varSt 'of' exprSeq ')' eosSt;
%syntax: eosSt -> 'for' 'await' '(' iExpr 'of' exprSeq ')' eosSt;

%syntax: eosSt -> 'with' '(' exprSeq ')' eosSt;

%syntax: eosSt -> ident ':' eosSt;


%syntax: varModifier -> 'var ';
%syntax: varModifier -> 'let ';
%syntax: varModifier -> 'const ';

%syntax: eosSt -> 'continue';
%syntax: eosSt -> 'continue' ident;

%syntax: eosSt -> 'break';
%syntax: eosSt -> 'break' ident;

%syntax: eosSt -> 'return';
%syntax: eosSt -> 'return' eexprSeq;
%syntax: fullSt -> 'return' fexprSeq;

%syntax: yieldSt -> 'yield' ;
%syntax: yieldSt -> 'yield' exprSeq;
%syntax: eosSt -> yieldSt ;

%syntax: fullSt -> 'switch' '(' exprSeq ')' caseBlock;

%syntax: caseBlock -> '{' '}';
%syntax: caseBlock -> '{' caseClauses '}';

%syntax: caseClauses -> caseClause;
%syntax: caseClauses -> caseClauses caseClause;

%syntax: caseClause -> 'default' ':' stmts;
%syntax: caseClause -> 'default' ':';
%syntax: caseClause -> 'case' exprSeq ':' stmts;
%syntax: caseClause -> 'case' exprSeq ':';

%syntax: eosSt -> 'throw' eexprSeq;
%syntax: fullSt -> 'throw' fexprSeq;

%syntax: trySt -> 'try' block catchProduction;
%syntax: trySt -> 'try' block catchProduction finallyProduction;
%syntax: trySt -> 'try' block finallyProduction;

%syntax: catchProduction -> 'catch' '(' assignable ')' block;
%syntax: catchProduction -> 'catch' '(' ')' block;
%syntax: catchProduction -> 'catch'  block;
%syntax: finallyProduction -> 'finally' block;

%syntax: eosSt -> 'debugger';

%syntax: parList -> '(' ')';
%syntax: parList -> '(' parList0 ')';

%syntax: fBody -> '{' '}';
%syntax: fBody -> '{' stmts '}';

%syntax: funDecl -> 'async' 'function' '*' idName parList fBody;
%syntax: funDecl -> 'async' 'function' idName parList fBody;
%syntax: funDecl -> 'function' '*' idName parList fBody;
%syntax: funDecl -> 'function' idName parList fBody;

%syntax: clsDecl -> 'class' ident classTail;

%syntax: classTail -> 'extends' iExpr '{' clsElems '}';
%syntax: classTail -> 'extends' iExpr '{' '}';
%syntax: classTail -> '{' clsElems '}';
%syntax: classTail -> '{' '}';

%syntax: methodAttrs -> 'static';
%syntax: methodAttrs -> 'async';

%syntax: clsElems -> clsElem;
%syntax: clsElems -> clsElems clsElem;

%syntax: clsElem -> methodAttrs clsElem;
%syntax: clsElem -> mtdDef;
%syntax: clsElem -> ';';
%syntax: clsElem -> propNm '=' iExpr;
%syntax: clsElem -> '#' propNm '=' iExpr;

%syntax: mtdDef0 -> propNm parList fBody;
%syntax: mtdDef0 -> 'get' propNm '(' ')' fBody;
%syntax: mtdDef0 -> 'set' propNm parList fBody;
%syntax: mtdDef -> '*' '#' mtdDef0;
%syntax: mtdDef -> '*' mtdDef0;
%syntax: mtdDef -> '#' mtdDef0;
%syntax: mtdDef -> mtdDef0;

%syntax: parList0 -> lastPar;
%syntax: parList0 -> parArg ;
%syntax: parList0 -> parArg ',' parList0;

%syntax: parArg ->  assignable '=' iExpr;
%syntax: parArg ->  assignable;

%syntax: lastPar -> '...' iExpr;

%syntax: arr -> '[' ']';
%syntax: arr -> '[' zpts ']';
%syntax: arr -> '[' zpts elementList ']';
%syntax: arr -> '[' elementList ']';

%syntax: zpts -> ',';
%syntax: zpts -> ',' zpts;
%syntax: elementList -> arrayElement;
%syntax: elementList -> arrayElement zpts;
%syntax: elementList -> arrayElement zpts elementList;

%syntax: arrayElement -> iExpr;
%syntax: arrayElement -> '...' iExpr;

%syntax: propAssigns -> propAssign ;
%syntax: propAssigns -> propAssign ',';
%syntax: propAssigns -> propAssign ',' propAssigns;

%syntax: obj -> '{' propAssigns '}';
%syntax: obj -> '{' '}';

%syntax: propAssign -> propNm '=' iExpr ;
%syntax: propAssign -> propNm ':' iExpr ;
%syntax: propAssign -> '[' iExpr ']' ':' iExpr;
%syntax: propAssign -> 'async' '*' propNm parList  fBody;
%syntax: propAssign -> '*' propNm parList  fBody;
%syntax: propAssign -> 'async' propNm parList  fBody;
%syntax: propAssign -> propNm parList  fBody;
%syntax: propAssign -> 'get' propNm '(' ')' fBody;
%syntax: propAssign -> 'set' propNm '(' parArg ')' fBody;
%syntax: propAssign -> idName;      
%syntax: propAssign -> '...' iExpr ;

%syntax: propNm -> idName;
%syntax: propNm -> string;
%syntax: propNm -> num;
%syntax: propNm -> '[' iExpr ']';

%syntax: argList -> argument;
%syntax: argList -> argument ',';
%syntax: argList -> argument ',' argList;
%syntax: arguments -> '(' ')';
%syntax: arguments -> '(' argList ')';

%syntax: argument -> iExpr;
%syntax: argument -> '...' iExpr;

%syntax: eexprSeq ->  ieExpr ;
%syntax: eexprSeq -> iExpr ',' eexprSeq;
%syntax: fexprSeq ->  fExpr ;
%syntax: fexprSeq -> iExpr ',' fexprSeq;

%syntax: exprSeq -> eexprSeq;
%syntax: exprSeq -> fexprSeq;

%syntax: esExpr -> lambda                  ;
%syntax: fsExpr -> funDecl                  ;
%syntax: fsExpr -> clsDecl                 ;
%syntax: fsExpr -> 'class' classTail       ;
%syntax: esExpr -> sExpr '[' exprSeq ']'  ;
%syntax: esExpr -> sExpr '?' '.' '#' idName  ;
%syntax: esExpr -> sExpr '?' '.'  idName     ;
%syntax: esExpr -> sExpr '.' '#' idName      ;
%syntax: esExpr -> sExpr '.' idName          ;
%syntax: esExpr -> sExpr arguments       ;
%syntax: esExpr -> 'new' iExpr          ;
%syntax: esExpr -> 'new' '.' ident       ;
%syntax: esExpr -> sExpr '++'            ;
%syntax: esExpr -> sExpr '--'            ;
%syntax: esExpr -> 'delete' iExpr        ;
%syntax: esExpr -> 'void' iExpr          ;
%syntax: esExpr -> 'typeof' iExpr        ;
%syntax: esExpr -> '++' iExpr            ;
%syntax: esExpr -> '--' iExpr            ;
%syntax: esExpr -> sExpr '--' iExpr            ;
%syntax: esExpr -> '+' iExpr             ;
%syntax: esExpr -> '-' iExpr             ;
%syntax: esExpr -> '~' iExpr             ;
%syntax: esExpr -> '!' iExpr             ;
%syntax: esExpr -> 'await' iExpr         ;
%syntax: esExpr -> sExpr '**' iExpr       ;
%syntax: esExpr -> sExpr '*' iExpr        ;
%syntax: esExpr -> sExpr '/' iExpr        ;
%syntax: esExpr -> sExpr '%' iExpr        ;
%syntax: esExpr -> sExpr '+' iExpr        ;
%syntax: esExpr -> sExpr '-' iExpr        ;
%syntax: esExpr -> sExpr '??' iExpr       ;
%syntax: esExpr -> sExpr '<<' iExpr       ;
%syntax: esExpr -> sExpr '>>' iExpr       ;
%syntax: esExpr -> sExpr '>>>' iExpr      ;
%syntax: esExpr -> sExpr '<' iExpr        ;
%syntax: esExpr -> sExpr '>' iExpr        ;
%syntax: esExpr -> sExpr '<=' iExpr       ;
%syntax: esExpr -> sExpr '>=' iExpr       ;
%syntax: esExpr -> sExpr 'instanceof' iExpr;
%syntax: esExpr -> sExpr 'in' iExpr   ;   
%syntax: esExpr -> sExpr '==' iExpr   ;   
%syntax: esExpr -> sExpr '!=' iExpr   ;   
%syntax: esExpr -> sExpr '===' iExpr  ;   
%syntax: esExpr -> sExpr '!==' iExpr  ;   
%syntax: esExpr -> sExpr '&' iExpr    ;   
%syntax: esExpr -> sExpr '^' iExpr    ;   
%syntax: esExpr -> sExpr '|' iExpr    ;   
%syntax: esExpr -> sExpr '&&' iExpr   ;   
%syntax: esExpr -> sExpr '||' iExpr   ;   
%syntax: esExpr -> sExpr '?' iExpr ':' iExpr;
%syntax: esExpr -> sExpr '=' iExpr                  ;
%syntax: esExpr -> sExpr asgnOp iExpr   ;
%syntax: esExpr -> 'import' '(' iExpr ')'                      ;
%syntax: esExpr -> sExpr templStr                 ;
%syntax: esExpr -> yieldSt ;
%syntax: esExpr -> 'this'  ;
%syntax: esExpr -> ident   ;
%syntax: esExpr -> 'super' ;
%syntax: esExpr -> literal ;
%syntax: esExpr -> arr     ;
%syntax: esExpr -> '(' exprSeq ')'   ;

%syntax: sExpr -> esExpr;
%syntax: sExpr -> fsExpr;
/////////////////////
%syntax: ieExpr -> obj;
%syntax: ieExpr -> lambda                  ;
%syntax: fExpr -> funDecl                  ;
%syntax: fExpr -> clsDecl                 ;
%syntax: fExpr -> 'class' classTail                            ;
%syntax: ieExpr -> iExpr '[' exprSeq ']'  ;
%syntax: ieExpr -> iExpr '?' '.' '#' idName  ;
%syntax: ieExpr -> iExpr '?' '.'  idName     ;
%syntax: ieExpr -> iExpr '.' '#' idName      ;
%syntax: ieExpr -> iExpr '.' idName          ;
%syntax: ieExpr -> iExpr arguments                   ;
%syntax: ieExpr -> 'new' iExpr                       ;
%syntax: ieExpr -> 'new' '.' ident                              ;
%syntax: ieExpr -> iExpr '++'                        ;
%syntax: ieExpr -> iExpr '--'                        ;
%syntax: ieExpr -> 'delete' iExpr                    ;
%syntax: ieExpr -> 'void' iExpr                      ;
%syntax: ieExpr -> 'typeof' iExpr                    ;
%syntax: ieExpr -> '++' iExpr                        ;
%syntax: ieExpr -> '--' iExpr                        ;
%syntax: ieExpr -> iExpr '--' iExpr                  ;
%syntax: ieExpr -> '+' iExpr                         ;
%syntax: ieExpr -> '-' iExpr                         ;
%syntax: ieExpr -> '~' iExpr                         ;
%syntax: ieExpr -> '!' iExpr                         ;
%syntax: ieExpr -> 'await' iExpr                     ;
%syntax: ieExpr -> iExpr '**' iExpr       ;
%syntax: ieExpr -> iExpr '*' iExpr        ;
%syntax: ieExpr -> iExpr '/' iExpr        ;
%syntax: ieExpr -> iExpr '%' iExpr        ;
%syntax: ieExpr -> iExpr '+' iExpr        ;
%syntax: ieExpr -> iExpr '-' iExpr        ;
%syntax: ieExpr -> iExpr '??' iExpr       ;
%syntax: ieExpr -> iExpr '<<' iExpr       ;
%syntax: ieExpr -> iExpr '>>' iExpr       ;
%syntax: ieExpr -> iExpr '>>>' iExpr      ;
%syntax: ieExpr -> iExpr '<' iExpr        ;
%syntax: ieExpr -> iExpr '>' iExpr        ;
%syntax: ieExpr -> iExpr '<=' iExpr       ;
%syntax: ieExpr -> iExpr '>=' iExpr       ;
%syntax: ieExpr -> iExpr 'instanceof' iExpr;
%syntax: ieExpr -> iExpr 'in' iExpr   ;   
%syntax: ieExpr -> iExpr '==' iExpr   ;   
%syntax: ieExpr -> iExpr '!=' iExpr   ;   
%syntax: ieExpr -> iExpr '===' iExpr  ;   
%syntax: ieExpr -> iExpr '!==' iExpr  ;   
%syntax: ieExpr -> iExpr '&' iExpr    ;   
%syntax: ieExpr -> iExpr '^' iExpr    ;   
%syntax: ieExpr -> iExpr '|' iExpr    ;   
%syntax: ieExpr -> iExpr '&&' iExpr   ;   
%syntax: ieExpr -> iExpr '||' iExpr   ;   
%syntax: ieExpr -> iExpr '?' iExpr ':' iExpr;
%syntax: ieExpr -> iExpr '=' iExpr                  ;
%syntax: ieExpr -> iExpr asgnOp iExpr   ;
%syntax: ieExpr -> 'import' '(' iExpr ')'                      ;
%syntax: ieExpr -> iExpr templStr                 ;
%syntax: ieExpr -> yieldSt                                         ;
%syntax: ieExpr -> 'this'                                                 ;
%syntax: ieExpr -> ident                                                  ;
%syntax: ieExpr -> 'super'                                                ;
%syntax: ieExpr -> literal                                                ;
%syntax: ieExpr -> arr                                           ;
%syntax: ieExpr -> '(' exprSeq ')'                             ;
%syntax: iExpr -> ieExpr;
%syntax: iExpr -> fExpr;
//////////////////////

%syntax: kw0 -> 'let';

%syntax: assignable -> idName;
%syntax: assignable -> arr;
%syntax: assignable -> obj;


%syntax: lambda -> 'async' 'function' '*' parList fBody;
%syntax: lambda -> 'async' 'function' parList fBody;
%syntax: lambda -> 'function' '*' parList fBody;
%syntax: lambda -> 'function' parList fBody;
%syntax: lambda -> 'async' arrFunPars '=>' lambdaBody;
%syntax: lambda -> ident '=>' lambdaBody;
%syntax: lambda -> '(' ')' '=>' lambdaBody;
%syntax: lambda -> '(' exprSeq ')' '=>' lambdaBody;
%syntax: lambda -> '(' lParSeq ')' '=>' lambdaBody;
%syntax: lParSeq -> '...' iExpr;
%syntax: lParSeq -> iExpr ',' lParSeq;

%syntax: lambdaBody -> sExpr;
%syntax: lambdaBody -> fBody;

%syntax: asgnOp -> '*=';
%syntax: asgnOp -> '/=';
%syntax: asgnOp -> '%=';
%syntax: asgnOp -> '+=';
%syntax: asgnOp -> '-=';
%syntax: asgnOp -> '<<=';
%syntax: asgnOp -> '>>=';
%syntax: asgnOp -> '>>>=';
%syntax: asgnOp -> '&=';
%syntax: asgnOp -> '^=';
%syntax: asgnOp -> '|=';
%syntax: asgnOp -> '**=';

%syntax: literal -> 'null';
%syntax: literal -> 'true';
%syntax: literal -> 'false';
%syntax: literal -> string;
%syntax: literal -> templStr;
%syntax: literal -> RegularExpressionLiteral;
%syntax: literal -> num;
%syntax: literal -> bignum;

%syntax: num -> DecLit;
%syntax: num -> HexLit;
%syntax: num -> OctLit;
%syntax: num -> OctLit2;
%syntax: num -> BinLit;

%syntax: bignum -> BigDecLit;
%syntax: bignum -> BigHexLit;
%syntax: bignum -> BigOctLit;
%syntax: bignum -> BigBinLit;

%syntax: idName -> ident;
%syntax: idName -> keyword;

%syntax: keyword -> 'null';
%syntax: keyword -> 'true';
%syntax: keyword -> 'false';
%syntax: keyword -> 'break';
%syntax: keyword -> 'do';
%syntax: keyword -> 'instanceof';
%syntax: keyword -> 'typeof';
%syntax: keyword -> 'case';
%syntax: keyword -> 'else';
%syntax: keyword -> 'new';
%syntax: keyword -> 'var';
%syntax: keyword -> 'catch';
%syntax: keyword -> 'finally';
%syntax: keyword -> 'return';
%syntax: keyword -> 'void';
%syntax: keyword -> 'continue';
%syntax: keyword -> 'for';
%syntax: keyword -> 'switch';
%syntax: keyword -> 'while';
%syntax: keyword -> 'debugger';
%syntax: keyword -> 'function';
%syntax: keyword -> 'this';
%syntax: keyword -> 'with';
%syntax: keyword -> 'default';
%syntax: keyword -> 'if';
%syntax: keyword -> 'throw';
%syntax: keyword -> 'delete';
%syntax: keyword -> 'in';
%syntax: keyword -> 'try';
%syntax: keyword -> 'class';
%syntax: keyword -> 'enum';
%syntax: keyword -> 'extends';
%syntax: keyword -> 'super';
%syntax: keyword -> 'const';
%syntax: keyword -> 'export';
%syntax: keyword -> 'import';
%syntax: keyword -> 'implements';
%syntax: keyword -> 'let ';
%syntax: keyword -> 'set';
%syntax: keyword -> 'get';
%syntax: keyword -> 'private';
%syntax: keyword -> 'public';
%syntax: keyword -> 'interface';
%syntax: keyword -> 'package';
%syntax: keyword -> 'protected';
%syntax: keyword -> 'static';
%syntax: keyword -> 'yield';
%syntax: keyword -> 'async';
%syntax: keyword -> 'await';
%syntax: keyword -> 'from';
%syntax: keyword -> 'as';
