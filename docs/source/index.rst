.. pylext documentation master file, created by
   sphinx-quickstart on Sat Apr 17 02:01:38 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to pylext's documentation!
====================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


Библиотека pylext предназначена для создания всевозможных синтаксических расширений языка python.

Основной целью этой библиотеки является добавить в язык Python возможность создания встроенных DSL для различных целей.
Поддерживается добавление в грамматику языка новых синтаксических правил. Поддерживаются произвольные LR1-грамматики.
Правила грамматики разделяются на 3 типа:

- Встроенные правила, которые изначально присутствуют в языке Python
- Правила макрорасширений. К каждой вершине в дереве разбора, которая была получена в результате применения такого правило,
  применяется функция раскрытия этого макроса, которая преобразует соответствующее поддерево разбора.
- Вспомогательные правила. Для написания сложного макрорасширения может потребоваться определить довольно
  много вспомогательных нетерминалов и правил грамматики, каждое из которых не является самостоятельным и
  имеет смысл только в контексте целого макроса. Таким правилам тоже сопоставляется функция, которая преобразует поддерево
  в некоторый питоновский объект, с которым было бы удобно оперировать в процедуре раскрытия макроса.

Библиотека также даёт возможность добавлять новые токены. Внутри DSL могут потребоваться дополнительные литералы,
которых нет в языке python, и такие литералы также можно добавлять в грамматику.

Реализация системы макрорасширений является достаточно гибкой, и позволяет использовать макрос
сразу же после его объявления. Можно также определять новый, упрощённый синтаксис для добавления новых макросов.
Однако такая свобода действий вносит свои сложности, связанные с тем, что новые добавляемые правила
грамматики могут конфликтовать не только друг с другом, но и с синтаксисом языка Python.
В связи с этим для упрощения отладки рекомендуется реализовывать расширения в виде отдельных библиотек,
не перемешивая их с кодом, который использует эти макрорасширения.


Requirements
=================

* Software: CPython 3.6 or higher
* Hardware: Processor must support ABM instruction set (advanced bit manipulation).


Installation
==================

Run command:

.. code:: console

   $ pip install pylext


Поддерживаемый класс грамматик
==============================
Сисетма поддерживает произвольные синтаксические расширения, не выводящие стандартную грамматику языка Python
за рамки LR1. На самом деле, в силу используемой структуры данных для внутреннего представления грамматики,
принадлежность классу LR1 не проверяется по мере добавления правил. Кроме того,
при разборе операция Shift имеет приоритет перед Reduce, таким образом Shift-Reduce конфликты разрешаются однозначно,
и таким образом класс поддерживаемых грамматик оказывается чуть шире LR1.

Для удобства добавления новых знаков операций без ввенедия новых нетерминалов у правил
грамматики можно устанавливать приоритеты. С помощью приоритетов определяется порядок применений правил вида:
.. code::

   A -> A ... (постфиксные)
   A -> ... A (префиксные)
   A -> A ... A (инфиксные)

Когда с помощью приоритетов приходится разрешать порядок свёрток, содержащих различные нетерминалы, это считается ошибкой.
У инфиксных правил задаются 2 приоритета -- левый и правый. С помощью разницы левого и правого приоритета могут быть заданы
левоассоциативные и правоассоциативные операции.

Общий принцип работы системы
============================
Система макрорасширений активируется внутри файлов с расширением .pyg. При этом происходит следующее:

1. Создаётся контекст синтаксического разбора данного модуля, в котором хранится текущее состояние грамматики.
   Изначально грамматика состоит из грамматики языка Python и нескольких дополнительных правил,
   позволяющих писать макрорасширения.
2. Файл читается поблочно. Как только построено дерево разбора для очередного блока, для него выполняются следующие действия:

   - Если этот блок представляет описание нового макрорасширения, список пра
   - Раскрываются все макросы, порядок раскрытия макросов -- сверху вниз.
     Есть также встроенные макросы, которые обрабатываются особым способом:

      - defmacro (<rule>): ... -- добавление нового правила в грамматику и макроса, который этому правилу соответствует.
      - syntax (<rule>): ... -- добавление нового вспомогательного правила в грамматику
      - new_token(<PEG expression>) -- добавление нового токена
      - gimport <module> [as <name>] / from <module> gimport <names> / from <module> gimport <name> as <name> --
        импорт модуля вместе с объявленной в нём грамматикой. Все правила импортированной грамматики
        тут же добавляются в текущий контекст.

   - Полученное дерево разбора уже не содержит расширений синтаксиса, оно преобразуется обратно в текст
   - Полученный текст подаётся в интерпретатор через функцию exec
3. Генерируется функция _import_grammar(), которая вызывается при импорте данного модуля через gimport

Для того, чтобы можно было импортировать pyg модули из обычных питоновских файлов, необходимо активировать библиотеку,
импортировав pylext.


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

